Compiled from "ThreadStack.java"
public class cxc.jvm.memoryModel.ThreadStack {
  public cxc.jvm.memoryModel.ThreadStack();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public int compute();
    Code:
       0: iconst_1
       1: istore_1
       2: iconst_2
       3: istore_2
       4: iload_1
       5: iload_2
       6: iadd
       7: bipush        10
       9: imul
      10: istore_3
      11: aload_0
      12: invokevirtual #2                  // Method print:()V
      15: iload_3
      16: ireturn

  public void print();
    Code:
       0: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;
       3: ldc           #4                  // String -----print-----
       5: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       8: return

  public void funOne();
    Code:
       0: iconst_1 //将int型(1)推送至栈顶
       1: istore_1 //将栈顶int型数值存入第二个本地变量
       2: iconst_5 //将int型(5)推送至栈顶
       3: istore_2 //将栈顶int型数值存入第三个本地变量
       4: iload_1 //将第二个int型本地变量推送至栈顶
       5: iload_2 //将第三个int型本地变量推送至栈顶
       6: iadd  //将栈顶两int型数值相加并将结果压入栈顶
       7: bipush  //将单字节的常量值(-128~127)推送至栈顶      10
       9: imul //将栈顶两int型数值相乘并将结果压入栈顶
      10: istore_3 //将栈顶int型数值存入第四个本地变量
      11: return //从当前方法返回void

  public static void main(java.lang.String[]);
    Code:
       0: new           #6                  // class cxc/jvm/memoryModel/ThreadStack
       3: dup
       4: invokespecial #7                  // Method "<init>":()V
       7: astore_1
       8: aload_1
       9: invokevirtual #8                  // Method compute:()I
      12: pop
      13: aload_1
      14: invokevirtual #9                  // Method funOne:()V
      17: return
}
